c = [-45, 6, 0, 72, 1543]

c

c[0]

c[4]

len(c)

c[-1]

c[100]

 c[0] + c[1] + c[2]

a_list = []

[1, 2, 3, 4, 5]

letters = []

letters += 'Python'

letters

list1 = [10, 20, 30]

list2 = [40, 50]

concatenated_list = list1 + list2

concatenated_list

for i in range(len(concatenated_list)):
    ...:     print(f'{i}: {concatenated_list[i]}')
    ...:
    

student_tuple = ()

student_tuple 

len(student_tuple)

student_tuple = 'John', 'Green',3.3

 student_tuple =

 student_tuple

len( student_tuple)

another_student_tuple = ('Mary','Red', 3.3)

another_student_tuple

a_singleton_tuple = ('red',) # note the comma

a_singleton_tuple

time_tuple = (9, 16, 1)

time_tuple

time_tuple[0] * 3600 + time_tuple[1] * 60 + time_tuple[2]

tuple1 = (10, 20, 30)

tuple2 = tuple1

tuple2

tuple2 += (40, 50)

tuple2

tuple1

numbers = [1, 2, 3, 4, 5]

numbers += [6, 7]

numbers

student_tuple = ('Amanda', 'Blue', [98, 75, 87])

student_tuple

single = (123.45,)

single

[1, 2, 3] + (4, 5, 6)

 student_tuple

 student_tuple = ('Amanda', [98, 75, 87])

first_name, grades = student_tuple

first_name

grades

first, second = 'hi'

print(f'{first} {second}')

number1, number2, number3 = [2, 3, 5]

 print(f'[number1} {number2} {number3}')

 print(f'{number1} {number2} {number3}')

 number1, number2, number3 = [10, 40, 10]

print(f'{number1} {number2} {number3}')

number1 = 99

number2 = 22

number1, number2 = (number1, number2)

print(f'number1 = {number1}; number2 = {number2}')
number1 = 99; number2 = 22

 number1, number2 = (number2, number1)

print(f'number1 = {number1}; number2 = {number2}')
number1 = 22; number2 = 99

colors = ['red', 'orange', 'yellow']

 list(enumerate(colors))

tuple(enumerate(colors))

for index, value in enumerate(colors):
    ...:     print(f'{index} {value}')
    ...:

run fig05_01.py

# fig05_01.py
"""Displaying a bar chart"""
number = [19, 3, 15, 7, 11]

print('\nCreating a bar chart from numbers:')
print(f'Index{"Value":>8}   Bar')

for index, value in enumerate(numbers):
    print(f'{index:>5}{value:>8}  {"*" * value}')

numbers = [2, 3, 5, 7, 11, 13, 17, 19]

numbers[2:6]

numbers[:6]

numbers[0:6]

numbers[6:]

numbers[6:len(numbers)]

numbers[:]

numbers[::2]

numbers[::-1]

numbers[-1:-9:-1]

numbers[0:3] = ['two', 'three','five']

numbers

numbers[0:3] = []

numbers

numbers = [2, 3, 5, 7, 11, 13,17, 19]

numbers[::2] = [100, 100, 100, 100]

numbers

id(numbers)

numbers[:] = []

numbers

id(numbers)

numbers = []

numbers

id(numbers)

numbers = list(range(1, 16))

numbers

numbers[1:len(numbers):2]

numbers[5:10] = [0] * len(numbers[5:10])

numbers

numbers[5:] = []

numbers

numbers[:] = []

numbers

numbers = list(range(0, 10))

numbers

del numbers[-1]

numbers

del numbers[0:2]

numbers

del numbers[::2]

numbers

del numbers[:]

numbers

del numbers

numbers

numbers = list(range(1, 16))

numbers

del numbers[0:4]

numbers

del numbers[::2]

numbers

def modify_elements(items):
    """" Multiplies all element values in items by 2.""""
    for i in range(len(items)):
        items[i] *= 2

numbers = [10, 3, 7, 1, 9]

modify_elements(items)

numbers

numbers_tuple = (10, 20, 30)

numbers_tuple

modify_elements(numbers_tuple)

numbers = [3, 7, 1, 4, 2, 8, 5, 6]

numbers.index(5)

numbers *= 2

numbers

numbers.index(5, 7)

numbers.index(5, 7, len(numbers))

numbers.index(7, 0, 4)

1000 in numbers

5 in numbers

1000 not in numbers

5 not in numbers

key = 1000

if key in numbers:
    print(f'found {key} at index {numbers.index(key)}')
else:
    print(f'{key} not found')      

numbers = [67, 12, 46, 43, 13]

numbers.index(43)

if 44 in numbers:
    print(f'Found 44 at index {numbers.index(44)}')
else:
    print('44 not found')  
    

color_name = ['orange', 'yellow', 'green']

color_name.insert(0, 'red')

color_name

color_name.append('blue')

color_name

color_name.extend(['indigo', 'violet'])

color_name

sample_list = []

s= 'abc'

sample_list.extend(s)

sample_list

t = (1, 2, 3)

sample_list.extend(t)

sample_list

sample_list.extend((4, 5, 6)) # note the extra parentheses

sample_list

color_name.remove('green')

color_name

color_name.clear()

color_name

responses = [1, 2, 5, 4, 3, 5, 2, 1, 3, 3, 1, 4, 3, 3, 2, 3, 2, 2]


for i in range(1, 6):
    print(f'{i} appears {responses.count(i)}) times in responses')
    

color_names = ['red', 'orange', 'yellow', 'green', 'blue']

color_names.reverse()

color_names

copied_list = color_names.copy()

copied_list

copied_list = color_names[:]

rainbow = ['green', 'orange', 'violet']

rainbow.insert(rainbow.index('violet'), 'red')

rainbow

rainbow.append('yellow')

rainbow

rainbow.reverse()

rainbow

rainbow.remove('orange')

rainbow

stack = []

stack.append('red')

stack

stack.append('green')

stack

stack.pop()

stack

stack.pop()

stack

stack.pop()

list1 = []

for items in range(1, 6):
    list1.append(items)
    

list1

list2 = [item for item in range(1, 6)]

list2

list3 = [item ** 3 for item in range(1, 6)]

list3

list4 = [item for item in range(1, 11) if item % 2 ==0]

list4

colors = ['red', 'orange', 'yellow', 'green', 'blue']

color2 = [item.upper() for item in colors]

color2

colors

cubes = [(x, x ** 3) for x in range(1, 6)]

cubes

multiples = [x for x in range(3, 30, 3)]

multiples

numbers = [10, 3, 7, 1, 9, 4, 2, 8, 5, 6]

for value in (x ** 2 for x in numbers if x % 2 != 0):
    print(value, end=' ')
    

squares_of_odds = (x ** 2 for x in numbers if x % 2 != 0)

squares_of_odds

list(x ** 3 for x in[10, 3, 7, 1, 9, 4, 2] if x % 2 == 0)

numbers = [10, 3, 7, 1, 9, 4, 2, 8, 5, 6]

def is_odd(x):
    """Returns True only if x is odd."""
    return x % 2 != 0


list(filter(is_odd, numbers))

[item for item in numbers if is_odd(item)]

list(filter(lambda x: x % 2 != 0, numbers))

numbers = [10, 3, 7, 1, 9, 4, 2, 8, 5, 6]

numbers

list(map(lambda x: x ** 2, numbers))

[item ** 2 for item in numbers]

list(map(lambda x: x ** 2,
          filter(lambda x: x % 2 != 0, numbers)))


[x ** 2 for x in numbers if x % 2 != 0]

numbers = list(range(1, 16))

numbers

list(filter(lambda x: x % 2 == 0, numbers))

list(map(lambda x: x ** 2, numbers))

list(map(lambda x: x ** 2, filter(lambda x: x % 2 ==0, numbers)))

fahrenheit = [41, 32, 212]

list(map(lambda x: (x, (x - 32) * 5 / 9), fahrenheit))

 'Red' < 'orange'

ord('R')

ord('o')

colors = ['Red', 'orange', 'Yellow', 'green', 'Blue']

min(colors, key=lambda s: s.lower())

max(colors, key=lambda s: s. lower())

numbers = [10, 3, 7, 1, 9, 4, 2, 8, 5, 6]

reversed_numbers = [item ** 2 for item in reversed(numbers)]

reversed_numbers

 names = ['Bob', 'Sue', 'Amanda']

grade_point_average = [3.5, 4.0, 3.75]

for name, gpa in zip(names, grade_point_average):
    print(f'Name-{name}; GPA={gpa}')
    
    

foods = ['Cookies', 'pizza', 'Grapes', 'apples', 'steak', 'Bacon']


min(foods)

min(foods, key=lambda s: s.lower())

[(a + b) for a, b in zip([10, 20, 30], [1, 2, 3])]

a = [[77, 68, 86 , 73], [96, 87, 89, 81], [70, 90, 86, 81]]

a = [[77, 68, 86 , 73], # first student's grades
     [96, 87, 89, 81],  # second student's grades
     [70, 90, 86, 81]]  # third student's grades

 for row in a:
     for item in row:
        print(item, end=' ')
     print()   
    

 for i, row in enumerate(a):
     for j, item in enumerate(row):
         print(f'a[{i}][{j}]={item} ', end=' ')
     print() 

for row in range(len(sales)):
    for col in range(len(sales[row])):
        sales[row][col] = 0
        

